<program> ::= (<statement> | <function_definition>)*
<statement> ::= <variable_definition> | <assignment> | <conditional> | <iteration> | <function_call> | <procedure_call> | <return>
<statement_block> ::= "{" <statement>* "}"
<variable_definition> ::= ("let" | "var") <id> [":" <type>] "=" (<expression> | <call>)
<letter> ::= /[a-z]/ | /[A-Z]/
<digit> ::= /[0-9]/
<alphanumeric> ::= <letter> | <digit>
<id> ::= ("_" | <letter>) (<alphanumeric>)+
<type> ::= ("Double" | "Int" | "String") ["?"]
<call> ::= <id> "(" [ <call_parameter_list> ] ")"
<call_parameter_list> ::= <call_parameter> ("," <call_parameter>)*
<call_parameter> ::= [<id> ":"] <term>
<term> ::= <id> | "nil" | <int_literal> | <double_literal> | <string_literal>
<int_literal> ::= (<digit>)+
<double_literal> ::= (<digit>)+ "." (<digit>)+ [ ("e" | "E") [ "+" | "-" ] (<digit>)+ ]
<string_literal> ::= ('"' .* '"') | ('"""' .* '"""')
<expression> ::= <term> | <binary_epxpression> | <unwrap_expression> | "(" <expression> ")"
<binary_operator> ::= "*" | "/" | "+" | "-" | "==" | "!=" | "<" | ">" | "<=" | ">=" | "??"
<binary_epxpression> ::= <expression> <binary_operator> <expression>
<unwrap_expression> ::= <expression> "!"
<assignment> ::= <id> "=" <expression>
<conditional> ::= "if" <expression> "{" <statement>* "}" "else" "{" <statement>* "}"
<iteration> ::= "while" <expression> "{" <statement>* "}"
<function_call_parameter> ::= [<id> ":"] <term>
<function_call_parameter_list> ::= <function_call_parameter> ("," <function_call_parameter>)*
<function_call> ::= <id> "=" <procedure_call>
<procedure_call> ::= <id> "(" <function_call_parameter_list> ")"
<return> ::= "return" [<expression>]
<function_parameter_definition> ::= " (<id> | "_") <id> ":" <type>;
<function_parameter_list> ::= <function_parameter_definition> ("," <function_parameter_definition>)*
<function_definition> ::= func <id> "(" <function_call_parameter_list> ")" <statement_block>




// yacc-like
%token int_lit dec_lit str_lit expression call_parameter id
%%
statement : variable_decl | assignment | return; // TEMPORARY
variable_decl : variable_decl_keyword id opt_var_type "=" opt_init;
opt_var_type : ":" type | ;
variable_decl_keyword : "let" | "var";
return_type : "->" type | ;
function_opt_param_list : function_param_list | ;
function_param_list : function_param_def function_param_list_tail;
function_param_list_tail : "," function_param_list | ;
function_param_def : function_param_name function_param_name ":" type;
function_param_name : id | "_";
opt_init : initialiser | /*epsilon*/;
return : "return" opt_expr;
opt_expr : expression | ;
type : type_key_word opt_question;
opt_question : "?" | ;
type_key_word : "Double" | "Int" | "String";
initialiser : expression | call;
assignment : id "=" expression;
function_call : id "=" call;
term : id | "nil" | int_lit | dec_lit | str_lit;
call : id "(" opt_call_param_list ")";
opt_call_param_list : call_parameter_list | ;
call_parameter_list : call_parameter call_parameter_list_tail;
call_parameter_list_tail : "," call_parameter_list | ;


//call_parameter : term | id ":" term; //NELZE
program : top_level_statement | top_level_statement program | ;
top_level_statement : statement | function_definition;
//statement : variable_definition | assignment | conditional | iteration | function_call | call | return;
statement_block : lcb statements rcb;
conditional : "if" expression statement_block "else" statement_block;
iteration : "while" expression statement_block;
function_definition : "func" id "(" function_opt_param_list ")" return_type statement_block;
