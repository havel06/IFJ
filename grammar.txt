<program> ::= (<statement> | <function_definition>)*
<statement> ::= <variable_definition> | <assignment> | <conditional> | <iteration> | <function_call> | <procedure_call> | <return>
<statement_block> ::= "{" <statement>* "}"
<variable_definition> ::= ("let" | "var") <id> [":" <type>] "=" (<expression> | <call>)
<letter> ::= /[a-z]/ | /[A-Z]/
<digit> ::= /[0-9]/
<alphanumeric> ::= <letter> | <digit>
<id> ::= ("_" | <letter>) (<alphanumeric>)+
<type> ::= ("Double" | "Int" | "String") ["?"]
<call> ::= <id> "(" [ <call_parameter_list> ] ")"
<call_parameter_list> ::= <call_parameter> ("," <call_parameter>)*
<call_parameter> ::= [<id> ":"] <term>
<term> ::= <id> | "nil" | <int_literal> | <double_literal> | <string_literal>
<int_literal> ::= #TODO
<double_literal> ::= #TODO
<string_literal> ::= #TODO
<expression> ::= <term> | <binary_epxpression> | <unwrap_expression> | "(" <expression> ")"
<binary_operator> ::= "*" | "/" | "+" | "-" | "==" | "!=" | "<" | ">" | "<=" | ">=" | "??"
<binary_epxpression> ::= <expression> <binary_operator> <expression>
<unwrap_expression> ::= <expression> "!"
<assignment> ::= <id> "=" <expression>
<conditional> ::= "if" <expression> "{" <statement>* "}" "else" "{" <statement>* "}"
<iteration> ::= "while" <expression> "{" <statement>* "}"
<function_call_parameter> ::= [<id> ":"] <term>
<function_call_parameter_list> ::= <function_call_parameter> ("," <function_call_parameter>)*
<function_call> ::= <id> "=" <procedure_call>
<procedure_call> ::= <id> "(" <function_call_parameter_list> ")"
<return> ::= "return" [<expression>]
<function_parameter_definition> ::= " (<id> | "_") <id> ":" <type>;
<function_parameter_list> ::= <function_parameter_definition> ("," <function_parameter_definition>)*
<function_definition> ::= func <id> "(" <function_call_parameter_list> ")" <statement_block>
